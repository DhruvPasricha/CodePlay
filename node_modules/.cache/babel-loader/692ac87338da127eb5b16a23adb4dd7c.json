{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPrefix = getPrefix;\nexports.browserPrefixToKey = browserPrefixToKey;\nexports.browserPrefixToStyle = browserPrefixToStyle;\nexports.default = void 0;\nvar prefixes = ['Moz', 'Webkit', 'O', 'ms'];\n\nfunction getPrefix()\n/*: string*/\n{\n  var _window$document, _window$document$docu;\n\n  var prop\n  /*: string*/\n  = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform'; // Ensure we're running in an environment where there is actually a global\n  // `window` obj\n\n  if (typeof window === 'undefined') return ''; // If we're in a pseudo-browser server-side environment, this access\n  // path may not exist, so bail out if it doesn't.\n\n  var style = (_window$document = window.document) === null || _window$document === void 0 ? void 0 : (_window$document$docu = _window$document.documentElement) === null || _window$document$docu === void 0 ? void 0 : _window$document$docu.style;\n  if (!style) return '';\n  if (prop in style) return '';\n\n  for (var i = 0; i < prefixes.length; i++) {\n    if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];\n  }\n\n  return '';\n}\n\nfunction browserPrefixToKey(prop\n/*: string*/\n, prefix\n/*: string*/\n)\n/*: string*/\n{\n  return prefix ? \"\".concat(prefix).concat(kebabToTitleCase(prop)) : prop;\n}\n\nfunction browserPrefixToStyle(prop\n/*: string*/\n, prefix\n/*: string*/\n)\n/*: string*/\n{\n  return prefix ? \"-\".concat(prefix.toLowerCase(), \"-\").concat(prop) : prop;\n}\n\nfunction kebabToTitleCase(str\n/*: string*/\n)\n/*: string*/\n{\n  var out = '';\n  var shouldCapitalize = true;\n\n  for (var i = 0; i < str.length; i++) {\n    if (shouldCapitalize) {\n      out += str[i].toUpperCase();\n      shouldCapitalize = false;\n    } else if (str[i] === '-') {\n      shouldCapitalize = true;\n    } else {\n      out += str[i];\n    }\n  }\n\n  return out;\n} // Default export is the prefix itself, like 'Moz', 'Webkit', etc\n// Note that you may have to re-test for certain things; for instance, Chrome 50\n// can handle unprefixed `transform`, but not unprefixed `user-select`\n\n\nvar _default = getPrefix()\n/*: string*/\n;\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Dhruv/Downloads/projects OP/codepen-clone/node_modules/react-draggable/build/cjs/utils/getPrefix.js"],"names":["Object","defineProperty","exports","value","getPrefix","browserPrefixToKey","browserPrefixToStyle","default","prefixes","_window$document","_window$document$docu","prop","arguments","length","undefined","window","style","document","documentElement","i","prefix","concat","kebabToTitleCase","toLowerCase","str","out","shouldCapitalize","toUpperCase","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPrefix = getPrefix;\nexports.browserPrefixToKey = browserPrefixToKey;\nexports.browserPrefixToStyle = browserPrefixToStyle;\nexports.default = void 0;\nvar prefixes = ['Moz', 'Webkit', 'O', 'ms'];\n\nfunction getPrefix()\n/*: string*/\n{\n  var _window$document, _window$document$docu;\n\n  var prop\n  /*: string*/\n  = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';\n  // Ensure we're running in an environment where there is actually a global\n  // `window` obj\n  if (typeof window === 'undefined') return ''; // If we're in a pseudo-browser server-side environment, this access\n  // path may not exist, so bail out if it doesn't.\n\n  var style = (_window$document = window.document) === null || _window$document === void 0 ? void 0 : (_window$document$docu = _window$document.documentElement) === null || _window$document$docu === void 0 ? void 0 : _window$document$docu.style;\n  if (!style) return '';\n  if (prop in style) return '';\n\n  for (var i = 0; i < prefixes.length; i++) {\n    if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];\n  }\n\n  return '';\n}\n\nfunction browserPrefixToKey(prop\n/*: string*/\n, prefix\n/*: string*/\n)\n/*: string*/\n{\n  return prefix ? \"\".concat(prefix).concat(kebabToTitleCase(prop)) : prop;\n}\n\nfunction browserPrefixToStyle(prop\n/*: string*/\n, prefix\n/*: string*/\n)\n/*: string*/\n{\n  return prefix ? \"-\".concat(prefix.toLowerCase(), \"-\").concat(prop) : prop;\n}\n\nfunction kebabToTitleCase(str\n/*: string*/\n)\n/*: string*/\n{\n  var out = '';\n  var shouldCapitalize = true;\n\n  for (var i = 0; i < str.length; i++) {\n    if (shouldCapitalize) {\n      out += str[i].toUpperCase();\n      shouldCapitalize = false;\n    } else if (str[i] === '-') {\n      shouldCapitalize = true;\n    } else {\n      out += str[i];\n    }\n  }\n\n  return out;\n} // Default export is the prefix itself, like 'Moz', 'Webkit', etc\n// Note that you may have to re-test for certain things; for instance, Chrome 50\n// can handle unprefixed `transform`, but not unprefixed `user-select`\n\n\nvar _default = (getPrefix()\n/*: string*/\n);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}