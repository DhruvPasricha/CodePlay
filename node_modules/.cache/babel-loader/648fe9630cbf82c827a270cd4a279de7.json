{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"javascript\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit;\n    var statementIndent = parserConfig.statementIndent;\n    var jsonldMode = parserConfig.jsonld;\n    var jsonMode = parserConfig.json || jsonldMode;\n    var trackScope = parserConfig.trackScope !== false;\n    var isTS = parserConfig.typescript;\n    var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/; // Tokenizer\n\n    var keywords = function () {\n      function kw(type) {\n        return {\n          type: type,\n          style: \"keyword\"\n        };\n      }\n\n      var A = kw(\"keyword a\"),\n          B = kw(\"keyword b\"),\n          C = kw(\"keyword c\"),\n          D = kw(\"keyword d\");\n      var operator = kw(\"operator\"),\n          atom = {\n        type: \"atom\",\n        style: \"atom\"\n      };\n      return {\n        \"if\": kw(\"if\"),\n        \"while\": A,\n        \"with\": A,\n        \"else\": B,\n        \"do\": B,\n        \"try\": B,\n        \"finally\": B,\n        \"return\": D,\n        \"break\": D,\n        \"continue\": D,\n        \"new\": kw(\"new\"),\n        \"delete\": C,\n        \"void\": C,\n        \"throw\": C,\n        \"debugger\": kw(\"debugger\"),\n        \"var\": kw(\"var\"),\n        \"const\": kw(\"var\"),\n        \"let\": kw(\"var\"),\n        \"function\": kw(\"function\"),\n        \"catch\": kw(\"catch\"),\n        \"for\": kw(\"for\"),\n        \"switch\": kw(\"switch\"),\n        \"case\": kw(\"case\"),\n        \"default\": kw(\"default\"),\n        \"in\": operator,\n        \"typeof\": operator,\n        \"instanceof\": operator,\n        \"true\": atom,\n        \"false\": atom,\n        \"null\": atom,\n        \"undefined\": atom,\n        \"NaN\": atom,\n        \"Infinity\": atom,\n        \"this\": kw(\"this\"),\n        \"class\": kw(\"class\"),\n        \"super\": kw(\"atom\"),\n        \"yield\": C,\n        \"export\": kw(\"export\"),\n        \"import\": kw(\"import\"),\n        \"extends\": C,\n        \"await\": C\n      };\n    }();\n\n    var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n    var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n    function readRegexp(stream) {\n      var escaped = false,\n          next,\n          inSet = false;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped) {\n          if (next == \"/\" && !inSet) return;\n          if (next == \"[\") inSet = true;else if (inSet && next == \"]\") inSet = false;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n    } // Used as scratch variables to communicate multiple values without\n    // consing up tons of objects.\n\n\n    var type, content;\n\n    function ret(tp, style, cont) {\n      type = tp;\n      content = cont;\n      return style;\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n        return ret(\"number\", \"number\");\n      } else if (ch == \".\" && stream.match(\"..\")) {\n        return ret(\"spread\", \"meta\");\n      } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        return ret(ch);\n      } else if (ch == \"=\" && stream.eat(\">\")) {\n        return ret(\"=>\", \"operator\");\n      } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n        return ret(\"number\", \"number\");\n      } else if (/\\d/.test(ch)) {\n        stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n        return ret(\"number\", \"number\");\n      } else if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        } else if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return ret(\"comment\", \"comment\");\n        } else if (expressionAllowed(stream, state, 1)) {\n          readRegexp(stream);\n          stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n          return ret(\"regexp\", \"string-2\");\n        } else {\n          stream.eat(\"=\");\n          return ret(\"operator\", \"operator\", stream.current());\n        }\n      } else if (ch == \"`\") {\n        state.tokenize = tokenQuasi;\n        return tokenQuasi(stream, state);\n      } else if (ch == \"#\" && stream.peek() == \"!\") {\n        stream.skipToEnd();\n        return ret(\"meta\", \"meta\");\n      } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n        return ret(\"variable\", \"property\");\n      } else if (ch == \"<\" && stream.match(\"!--\") || ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start))) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (isOperatorChar.test(ch)) {\n        if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n          if (stream.eat(\"=\")) {\n            if (ch == \"!\" || ch == \"=\") stream.eat(\"=\");\n          } else if (/[<>*+\\-|&?]/.test(ch)) {\n            stream.eat(ch);\n            if (ch == \">\") stream.eat(ch);\n          }\n        }\n\n        if (ch == \"?\" && stream.eat(\".\")) return ret(\".\");\n        return ret(\"operator\", \"operator\", stream.current());\n      } else if (wordRE.test(ch)) {\n        stream.eatWhile(wordRE);\n        var word = stream.current();\n\n        if (state.lastType != \".\") {\n          if (keywords.propertyIsEnumerable(word)) {\n            var kw = keywords[word];\n            return ret(kw.type, kw.style, word);\n          }\n\n          if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false)) return ret(\"async\", \"keyword\", word);\n        }\n\n        return ret(\"variable\", \"variable\", word);\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next;\n\n        if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)) {\n          state.tokenize = tokenBase;\n          return ret(\"jsonld-keyword\", \"meta\");\n        }\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) break;\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return ret(\"comment\", \"comment\");\n    }\n\n    function tokenQuasi(stream, state) {\n      var escaped = false,\n          next;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      return ret(\"quasi\", \"string-2\", stream.current());\n    }\n\n    var brackets = \"([{}])\"; // This is a crude lookahead trick to try and notice that we're\n    // parsing the argument patterns for a fat-arrow function before we\n    // actually hit the arrow token. It only works if the arrow is on\n    // the same line as the arguments and there's no strange noise\n    // (comments) in between. Fallback is to only notice when we hit the\n    // arrow, and not declare the arguments as locals for the arrow\n    // body.\n\n    function findFatArrow(stream, state) {\n      if (state.fatArrowAt) state.fatArrowAt = null;\n      var arrow = stream.string.indexOf(\"=>\", stream.start);\n      if (arrow < 0) return;\n\n      if (isTS) {\n        // Try to skip TypeScript return type declarations after the arguments\n        var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow));\n        if (m) arrow = m.index;\n      }\n\n      var depth = 0,\n          sawSomething = false;\n\n      for (var pos = arrow - 1; pos >= 0; --pos) {\n        var ch = stream.string.charAt(pos);\n        var bracket = brackets.indexOf(ch);\n\n        if (bracket >= 0 && bracket < 3) {\n          if (!depth) {\n            ++pos;\n            break;\n          }\n\n          if (--depth == 0) {\n            if (ch == \"(\") sawSomething = true;\n            break;\n          }\n        } else if (bracket >= 3 && bracket < 6) {\n          ++depth;\n        } else if (wordRE.test(ch)) {\n          sawSomething = true;\n        } else if (/[\"'\\/`]/.test(ch)) {\n          for (;; --pos) {\n            if (pos == 0) return;\n            var next = stream.string.charAt(pos - 1);\n\n            if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") {\n              pos--;\n              break;\n            }\n          }\n        } else if (sawSomething && !depth) {\n          ++pos;\n          break;\n        }\n      }\n\n      if (sawSomething && !depth) state.fatArrowAt = pos;\n    } // Parser\n\n\n    var atomicTypes = {\n      \"atom\": true,\n      \"number\": true,\n      \"variable\": true,\n      \"string\": true,\n      \"regexp\": true,\n      \"this\": true,\n      \"import\": true,\n      \"jsonld-keyword\": true\n    };\n\n    function JSLexical(indented, column, type, align, prev, info) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.prev = prev;\n      this.info = info;\n      if (align != null) this.align = align;\n    }\n\n    function inScope(state, varname) {\n      if (!trackScope) return false;\n\n      for (var v = state.localVars; v; v = v.next) if (v.name == varname) return true;\n\n      for (var cx = state.context; cx; cx = cx.prev) {\n        for (var v = cx.vars; v; v = v.next) if (v.name == varname) return true;\n      }\n    }\n\n    function parseJS(state, style, type, content, stream) {\n      var cc = state.cc; // Communicate our context to the combinators.\n      // (Less wasteful than consing up a hundred closures on every call.)\n\n      cx.state = state;\n      cx.stream = stream;\n      cx.marked = null, cx.cc = cc;\n      cx.style = style;\n      if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = true;\n\n      while (true) {\n        var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n\n        if (combinator(type, content)) {\n          while (cc.length && cc[cc.length - 1].lex) cc.pop()();\n\n          if (cx.marked) return cx.marked;\n          if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n          return style;\n        }\n      }\n    } // Combinator utils\n\n\n    var cx = {\n      state: null,\n      column: null,\n      marked: null,\n      cc: null\n    };\n\n    function pass() {\n      for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n    }\n\n    function cont() {\n      pass.apply(null, arguments);\n      return true;\n    }\n\n    function inList(name, list) {\n      for (var v = list; v; v = v.next) if (v.name == name) return true;\n\n      return false;\n    }\n\n    function register(varname) {\n      var state = cx.state;\n      cx.marked = \"def\";\n      if (!trackScope) return;\n\n      if (state.context) {\n        if (state.lexical.info == \"var\" && state.context && state.context.block) {\n          // FIXME function decls are also not block scoped\n          var newContext = registerVarScoped(varname, state.context);\n\n          if (newContext != null) {\n            state.context = newContext;\n            return;\n          }\n        } else if (!inList(varname, state.localVars)) {\n          state.localVars = new Var(varname, state.localVars);\n          return;\n        }\n      } // Fall through means this is global\n\n\n      if (parserConfig.globalVars && !inList(varname, state.globalVars)) state.globalVars = new Var(varname, state.globalVars);\n    }\n\n    function registerVarScoped(varname, context) {\n      if (!context) {\n        return null;\n      } else if (context.block) {\n        var inner = registerVarScoped(varname, context.prev);\n        if (!inner) return null;\n        if (inner == context.prev) return context;\n        return new Context(inner, context.vars, true);\n      } else if (inList(varname, context.vars)) {\n        return context;\n      } else {\n        return new Context(context.prev, new Var(varname, context.vars), false);\n      }\n    }\n\n    function isModifier(name) {\n      return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\";\n    } // Combinators\n\n\n    function Context(prev, vars, block) {\n      this.prev = prev;\n      this.vars = vars;\n      this.block = block;\n    }\n\n    function Var(name, next) {\n      this.name = name;\n      this.next = next;\n    }\n\n    var defaultVars = new Var(\"this\", new Var(\"arguments\", null));\n\n    function pushcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, false);\n      cx.state.localVars = defaultVars;\n    }\n\n    function pushblockcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, true);\n      cx.state.localVars = null;\n    }\n\n    function popcontext() {\n      cx.state.localVars = cx.state.context.vars;\n      cx.state.context = cx.state.context.prev;\n    }\n\n    popcontext.lex = true;\n\n    function pushlex(type, info) {\n      var result = function () {\n        var state = cx.state,\n            indent = state.indented;\n        if (state.lexical.type == \"stat\") indent = state.lexical.indented;else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev) indent = outer.indented;\n        state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n      };\n\n      result.lex = true;\n      return result;\n    }\n\n    function poplex() {\n      var state = cx.state;\n\n      if (state.lexical.prev) {\n        if (state.lexical.type == \")\") state.indented = state.lexical.indented;\n        state.lexical = state.lexical.prev;\n      }\n    }\n\n    poplex.lex = true;\n\n    function expect(wanted) {\n      function exp(type) {\n        if (type == wanted) return cont();else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();else return cont(exp);\n      }\n\n      ;\n      return exp;\n    }\n\n    function statement(type, value) {\n      if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n      if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n      if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n      if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n      if (type == \"debugger\") return cont(expect(\";\"));\n      if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n      if (type == \";\") return cont();\n\n      if (type == \"if\") {\n        if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex) cx.state.cc.pop()();\n        return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n      }\n\n      if (type == \"function\") return cont(functiondef);\n      if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex);\n      }\n\n      if (type == \"variable\") {\n        if (isTS && value == \"declare\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n          cx.marked = \"keyword\";\n          if (value == \"enum\") return cont(enumdef);else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex);\n        } else if (isTS && value == \"namespace\") {\n          cx.marked = \"keyword\";\n          return cont(pushlex(\"form\"), expression, statement, poplex);\n        } else if (isTS && value == \"abstract\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else {\n          return cont(pushlex(\"stat\"), maybelabel);\n        }\n      }\n\n      if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext, block, poplex, poplex, popcontext);\n      if (type == \"case\") return cont(expression, expect(\":\"));\n      if (type == \"default\") return cont(expect(\":\"));\n      if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n      if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n      if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n      if (type == \"async\") return cont(statement);\n      if (value == \"@\") return cont(expression, statement);\n      return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n    }\n\n    function maybeCatchBinding(type) {\n      if (type == \"(\") return cont(funarg, expect(\")\"));\n    }\n\n    function expression(type, value) {\n      return expressionInner(type, value, false);\n    }\n\n    function expressionNoComma(type, value) {\n      return expressionInner(type, value, true);\n    }\n\n    function parenExpr(type) {\n      if (type != \"(\") return pass();\n      return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex);\n    }\n\n    function expressionInner(type, value, noComma) {\n      if (cx.state.fatArrowAt == cx.stream.start) {\n        var body = noComma ? arrowBodyNoComma : arrowBody;\n        if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n      }\n\n      var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n      if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n      if (type == \"function\") return cont(functiondef, maybeop);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\"), classExpression, poplex);\n      }\n\n      if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n      if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n      if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n      if (type == \"quasi\") return pass(quasi, maybeop);\n      if (type == \"new\") return cont(maybeTarget(noComma));\n      return cont();\n    }\n\n    function maybeexpression(type) {\n      if (type.match(/[;\\}\\)\\],]/)) return pass();\n      return pass(expression);\n    }\n\n    function maybeoperatorComma(type, value) {\n      if (type == \",\") return cont(maybeexpression);\n      return maybeoperatorNoComma(type, value, false);\n    }\n\n    function maybeoperatorNoComma(type, value, noComma) {\n      var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n      var expr = noComma == false ? expression : expressionNoComma;\n      if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n\n      if (type == \"operator\") {\n        if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n        if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false)) return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n        if (value == \"?\") return cont(expression, expect(\":\"), expr);\n        return cont(expr);\n      }\n\n      if (type == \"quasi\") {\n        return pass(quasi, me);\n      }\n\n      if (type == \";\") return;\n      if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n      if (type == \".\") return cont(property, me);\n      if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n\n      if (isTS && value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr, me);\n      }\n\n      if (type == \"regexp\") {\n        cx.state.lastType = cx.marked = \"operator\";\n        cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);\n        return cont(expr);\n      }\n    }\n\n    function quasi(type, value) {\n      if (type != \"quasi\") return pass();\n      if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n      return cont(maybeexpression, continueQuasi);\n    }\n\n    function continueQuasi(type) {\n      if (type == \"}\") {\n        cx.marked = \"string-2\";\n        cx.state.tokenize = tokenQuasi;\n        return cont(quasi);\n      }\n    }\n\n    function arrowBody(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expression);\n    }\n\n    function arrowBodyNoComma(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expressionNoComma);\n    }\n\n    function maybeTarget(noComma) {\n      return function (type) {\n        if (type == \".\") return cont(noComma ? targetNoComma : target);else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);else return pass(noComma ? expressionNoComma : expression);\n      };\n    }\n\n    function target(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorComma);\n      }\n    }\n\n    function targetNoComma(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorNoComma);\n      }\n    }\n\n    function maybelabel(type) {\n      if (type == \":\") return cont(poplex, statement);\n      return pass(maybeoperatorComma, expect(\";\"), poplex);\n    }\n\n    function property(type) {\n      if (type == \"variable\") {\n        cx.marked = \"property\";\n        return cont();\n      }\n    }\n\n    function objprop(type, value) {\n      if (type == \"async\") {\n        cx.marked = \"property\";\n        return cont(objprop);\n      } else if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        if (value == \"get\" || value == \"set\") return cont(getterSetter);\n        var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n\n        if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false))) cx.state.fatArrowAt = cx.stream.pos + m[0].length;\n        return cont(afterprop);\n      } else if (type == \"number\" || type == \"string\") {\n        cx.marked = jsonldMode ? \"property\" : cx.style + \" property\";\n        return cont(afterprop);\n      } else if (type == \"jsonld-keyword\") {\n        return cont(afterprop);\n      } else if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \"[\") {\n        return cont(expression, maybetype, expect(\"]\"), afterprop);\n      } else if (type == \"spread\") {\n        return cont(expressionNoComma, afterprop);\n      } else if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \":\") {\n        return pass(afterprop);\n      }\n    }\n\n    function getterSetter(type) {\n      if (type != \"variable\") return pass(afterprop);\n      cx.marked = \"property\";\n      return cont(functiondef);\n    }\n\n    function afterprop(type) {\n      if (type == \":\") return cont(expressionNoComma);\n      if (type == \"(\") return pass(functiondef);\n    }\n\n    function commasep(what, end, sep) {\n      function proceed(type, value) {\n        if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n          var lex = cx.state.lexical;\n          if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n          return cont(function (type, value) {\n            if (type == end || value == end) return pass();\n            return pass(what);\n          }, proceed);\n        }\n\n        if (type == end || value == end) return cont();\n        if (sep && sep.indexOf(\";\") > -1) return pass(what);\n        return cont(expect(end));\n      }\n\n      return function (type, value) {\n        if (type == end || value == end) return cont();\n        return pass(what, proceed);\n      };\n    }\n\n    function contCommasep(what, end, info) {\n      for (var i = 3; i < arguments.length; i++) cx.cc.push(arguments[i]);\n\n      return cont(pushlex(end, info), commasep(what, end), poplex);\n    }\n\n    function block(type) {\n      if (type == \"}\") return cont();\n      return pass(statement, block);\n    }\n\n    function maybetype(type, value) {\n      if (isTS) {\n        if (type == \":\") return cont(typeexpr);\n        if (value == \"?\") return cont(maybetype);\n      }\n    }\n\n    function maybetypeOrIn(type, value) {\n      if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr);\n    }\n\n    function mayberettype(type) {\n      if (isTS && type == \":\") {\n        if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr);else return cont(typeexpr);\n      }\n    }\n\n    function isKW(_, value) {\n      if (value == \"is\") {\n        cx.marked = \"keyword\";\n        return cont();\n      }\n    }\n\n    function typeexpr(type, value) {\n      if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n        cx.marked = \"keyword\";\n        return cont(value == \"typeof\" ? expressionNoComma : typeexpr);\n      }\n\n      if (type == \"variable\" || value == \"void\") {\n        cx.marked = \"type\";\n        return cont(afterType);\n      }\n\n      if (value == \"|\" || value == \"&\") return cont(typeexpr);\n      if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n      if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType);\n      if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType);\n      if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType);\n      if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr);\n\n      if (type == \"quasi\") {\n        return pass(quasiType, afterType);\n      }\n    }\n\n    function maybeReturnType(type) {\n      if (type == \"=>\") return cont(typeexpr);\n    }\n\n    function typeprops(type) {\n      if (type.match(/[\\}\\)\\]]/)) return cont();\n      if (type == \",\" || type == \";\") return cont(typeprops);\n      return pass(typeprop, typeprops);\n    }\n\n    function typeprop(type, value) {\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(typeprop);\n      } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n        return cont(typeprop);\n      } else if (type == \":\") {\n        return cont(typeexpr);\n      } else if (type == \"[\") {\n        return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop);\n      } else if (type == \"(\") {\n        return pass(functiondecl, typeprop);\n      } else if (!type.match(/[;\\}\\)\\],]/)) {\n        return cont();\n      }\n    }\n\n    function quasiType(type, value) {\n      if (type != \"quasi\") return pass();\n      if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n      return cont(typeexpr, continueQuasiType);\n    }\n\n    function continueQuasiType(type) {\n      if (type == \"}\") {\n        cx.marked = \"string-2\";\n        cx.state.tokenize = tokenQuasi;\n        return cont(quasiType);\n      }\n    }\n\n    function typearg(type, value) {\n      if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg);\n      if (type == \":\") return cont(typeexpr);\n      if (type == \"spread\") return cont(typearg);\n      return pass(typeexpr);\n    }\n\n    function afterType(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n      if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr);\n      if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType);\n\n      if (value == \"extends\" || value == \"implements\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr);\n      }\n\n      if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr);\n    }\n\n    function maybeTypeArgs(_, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n    }\n\n    function typeparam() {\n      return pass(typeexpr, maybeTypeDefault);\n    }\n\n    function maybeTypeDefault(_, value) {\n      if (value == \"=\") return cont(typeexpr);\n    }\n\n    function vardef(_, value) {\n      if (value == \"enum\") {\n        cx.marked = \"keyword\";\n        return cont(enumdef);\n      }\n\n      return pass(pattern, maybetype, maybeAssign, vardefCont);\n    }\n\n    function pattern(type, value) {\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(pattern);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont();\n      }\n\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"[\") return contCommasep(eltpattern, \"]\");\n      if (type == \"{\") return contCommasep(proppattern, \"}\");\n    }\n\n    function proppattern(type, value) {\n      if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n        register(value);\n        return cont(maybeAssign);\n      }\n\n      if (type == \"variable\") cx.marked = \"property\";\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"}\") return pass();\n      if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n      return cont(expect(\":\"), pattern, maybeAssign);\n    }\n\n    function eltpattern() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function maybeAssign(_type, value) {\n      if (value == \"=\") return cont(expressionNoComma);\n    }\n\n    function vardefCont(type) {\n      if (type == \",\") return cont(vardef);\n    }\n\n    function maybeelse(type, value) {\n      if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n    }\n\n    function forspec(type, value) {\n      if (value == \"await\") return cont(forspec);\n      if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n    }\n\n    function forspec1(type) {\n      if (type == \"var\") return cont(vardef, forspec2);\n      if (type == \"variable\") return cont(forspec2);\n      return pass(forspec2);\n    }\n\n    function forspec2(type, value) {\n      if (type == \")\") return cont();\n      if (type == \";\") return cont(forspec2);\n\n      if (value == \"in\" || value == \"of\") {\n        cx.marked = \"keyword\";\n        return cont(expression, forspec2);\n      }\n\n      return pass(expression, forspec2);\n    }\n\n    function functiondef(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondef);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondef);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef);\n    }\n\n    function functiondecl(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondecl);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondecl);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl);\n    }\n\n    function typename(type, value) {\n      if (type == \"keyword\" || type == \"variable\") {\n        cx.marked = \"type\";\n        return cont(typename);\n      } else if (value == \"<\") {\n        return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex);\n      }\n    }\n\n    function funarg(type, value) {\n      if (value == \"@\") cont(expression, funarg);\n      if (type == \"spread\") return cont(funarg);\n\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(funarg);\n      }\n\n      if (isTS && type == \"this\") return cont(maybetype, maybeAssign);\n      return pass(pattern, maybetype, maybeAssign);\n    }\n\n    function classExpression(type, value) {\n      // Class expressions may have an optional name.\n      if (type == \"variable\") return className(type, value);\n      return classNameAfter(type, value);\n    }\n\n    function className(type, value) {\n      if (type == \"variable\") {\n        register(value);\n        return cont(classNameAfter);\n      }\n    }\n\n    function classNameAfter(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter);\n\n      if (value == \"extends\" || value == \"implements\" || isTS && type == \",\") {\n        if (value == \"implements\") cx.marked = \"keyword\";\n        return cont(isTS ? typeexpr : expression, classNameAfter);\n      }\n\n      if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n    }\n\n    function classBody(type, value) {\n      if (type == \"async\" || type == \"variable\" && (value == \"static\" || value == \"get\" || value == \"set\" || isTS && isModifier(value)) && cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false)) {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(classfield, classBody);\n      }\n\n      if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n      if (type == \"[\") return cont(expression, maybetype, expect(\"]\"), classfield, classBody);\n\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (isTS && type == \"(\") return pass(functiondecl, classBody);\n      if (type == \";\" || type == \",\") return cont(classBody);\n      if (type == \"}\") return cont();\n      if (value == \"@\") return cont(expression, classBody);\n    }\n\n    function classfield(type, value) {\n      if (value == \"!\") return cont(classfield);\n      if (value == \"?\") return cont(classfield);\n      if (type == \":\") return cont(typeexpr, maybeAssign);\n      if (value == \"=\") return cont(expressionNoComma);\n      var context = cx.state.lexical.prev,\n          isInterface = context && context.info == \"interface\";\n      return pass(isInterface ? functiondecl : functiondef);\n    }\n\n    function afterExport(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(maybeFrom, expect(\";\"));\n      }\n\n      if (value == \"default\") {\n        cx.marked = \"keyword\";\n        return cont(expression, expect(\";\"));\n      }\n\n      if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n      return pass(statement);\n    }\n\n    function exportField(type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(expect(\"variable\"));\n      }\n\n      if (type == \"variable\") return pass(expressionNoComma, exportField);\n    }\n\n    function afterImport(type) {\n      if (type == \"string\") return cont();\n      if (type == \"(\") return pass(expression);\n      if (type == \".\") return pass(maybeoperatorComma);\n      return pass(importSpec, maybeMoreImports, maybeFrom);\n    }\n\n    function importSpec(type, value) {\n      if (type == \"{\") return contCommasep(importSpec, \"}\");\n      if (type == \"variable\") register(value);\n      if (value == \"*\") cx.marked = \"keyword\";\n      return cont(maybeAs);\n    }\n\n    function maybeMoreImports(type) {\n      if (type == \",\") return cont(importSpec, maybeMoreImports);\n    }\n\n    function maybeAs(_type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(importSpec);\n      }\n    }\n\n    function maybeFrom(_type, value) {\n      if (value == \"from\") {\n        cx.marked = \"keyword\";\n        return cont(expression);\n      }\n    }\n\n    function arrayLiteral(type) {\n      if (type == \"]\") return cont();\n      return pass(commasep(expressionNoComma, \"]\"));\n    }\n\n    function enumdef() {\n      return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex);\n    }\n\n    function enummember() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function isContinuedStatement(state, textAfter) {\n      return state.lastType == \"operator\" || state.lastType == \",\" || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));\n    }\n\n    function expressionAllowed(stream, state, backUp) {\n      return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) || state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));\n    } // Interface\n\n\n    return {\n      startState: function (basecolumn) {\n        var state = {\n          tokenize: tokenBase,\n          lastType: \"sof\",\n          cc: [],\n          lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n          localVars: parserConfig.localVars,\n          context: parserConfig.localVars && new Context(null, null, false),\n          indented: basecolumn || 0\n        };\n        if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\") state.globalVars = parserConfig.globalVars;\n        return state;\n      },\n      token: function (stream, state) {\n        if (stream.sol()) {\n          if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = false;\n          state.indented = stream.indentation();\n          findFatArrow(stream, state);\n        }\n\n        if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (type == \"comment\") return style;\n        state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n        return parseJS(state, style, type, content, stream);\n      },\n      indent: function (state, textAfter) {\n        if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n        if (state.tokenize != tokenBase) return 0;\n        var firstChar = textAfter && textAfter.charAt(0),\n            lexical = state.lexical,\n            top; // Kludge to prevent 'maybelse' from blocking lexical scope pops\n\n        if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n          var c = state.cc[i];\n          if (c == poplex) lexical = lexical.prev;else if (c != maybeelse && c != popcontext) break;\n        }\n\n        while ((lexical.type == \"stat\" || lexical.type == \"form\") && (firstChar == \"}\" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))) lexical = lexical.prev;\n\n        if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\") lexical = lexical.prev;\n        var type = lexical.type,\n            closing = firstChar == type;\n        if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);else if (type == \"form\" && firstChar == \"{\") return lexical.indented;else if (type == \"form\") return lexical.indented + indentUnit;else if (type == \"stat\") return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false) return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);else if (lexical.align) return lexical.column + (closing ? 0 : 1);else return lexical.indented + (closing ? 0 : indentUnit);\n      },\n      electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      blockCommentStart: jsonMode ? null : \"/*\",\n      blockCommentEnd: jsonMode ? null : \"*/\",\n      blockCommentContinue: jsonMode ? null : \" * \",\n      lineComment: jsonMode ? null : \"//\",\n      fold: \"brace\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      helperType: jsonMode ? \"json\" : \"javascript\",\n      jsonldMode: jsonldMode,\n      jsonMode: jsonMode,\n      expressionAllowed: expressionAllowed,\n      skipExpression: function (state) {\n        parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null));\n      }\n    };\n  });\n  CodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n  CodeMirror.defineMIME(\"text/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/x-json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/manifest+json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/ld+json\", {\n    name: \"javascript\",\n    jsonld: true\n  });\n  CodeMirror.defineMIME(\"text/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n  CodeMirror.defineMIME(\"application/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n});","map":{"version":3,"sources":["C:/Users/Dhruv/Downloads/projects OP/codepen-clone/node_modules/codemirror/mode/javascript/javascript.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","trackScope","isTS","typescript","wordRE","wordCharacters","keywords","kw","type","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","readRegexp","stream","escaped","next","inSet","content","ret","tp","cont","tokenBase","state","ch","tokenize","tokenString","match","test","eat","tokenComment","skipToEnd","expressionAllowed","current","tokenQuasi","peek","eatWhile","string","slice","start","lexical","word","lastType","propertyIsEnumerable","quote","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","JSLexical","indented","column","align","prev","info","inScope","varname","v","localVars","name","cx","context","vars","parseJS","cc","marked","hasOwnProperty","combinator","length","pop","expression","statement","lex","pass","i","arguments","push","apply","inList","list","register","block","newContext","registerVarScoped","Var","globalVars","inner","Context","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","poplex","expect","wanted","exp","value","vardef","parenExpr","maybeexpression","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","classExpression","arrayLiteral","contCommasep","objprop","quasi","maybeTarget","me","expr","property","backUp","continueQuasi","targetNoComma","target","maybeTypeArgs","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","isInterface","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","isContinuedStatement","textAfter","startState","basecolumn","token","sol","indentation","eatSpace","Pass","firstChar","top","c","closing","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","StringStream","registerHelper","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var trackScope = parserConfig.trackScope !== false\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    if (!trackScope) return false\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (!trackScope) return\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") { return pass(quasiType, afterType); }\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\") return cont(classfield)\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null))\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/x-json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/manifest+json\", { name: \"javascript\", json: true })\nCodeMirror.defineMIME(\"application/ld+json\", { name: \"javascript\", jsonld: true });\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n"]},"metadata":{},"sourceType":"script"}