{"ast":null,"code":"import { highlightBlock } from 'highlight.js';\nimport React, { useState, useRef, useLayoutEffect, useEffect } from 'react';\n\nrequire('./index.css');\n\nvar CodeEditorEditable = function CodeEditorEditable(_ref) {\n  var _ref$width = _ref.width,\n      width = _ref$width === void 0 ? '500px' : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? '500px' : _ref$height,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? '0' : _ref$padding,\n      _ref$borderRadius = _ref.borderRadius,\n      borderRadius = _ref$borderRadius === void 0 ? '0' : _ref$borderRadius,\n      value = _ref.value,\n      setValue = _ref.setValue,\n      language = _ref.language,\n      _ref$caretColor = _ref.caretColor,\n      caretColor = _ref$caretColor === void 0 ? 'red' : _ref$caretColor,\n      _ref$tabSize = _ref.tabSize,\n      tabSize = _ref$tabSize === void 0 ? 2 : _ref$tabSize,\n      _ref$inlineNumbers = _ref.inlineNumbers,\n      inlineNumbers = _ref$inlineNumbers === void 0 ? true : _ref$inlineNumbers;\n\n  var _useState = useState(['']),\n      lineNumbers = _useState[0],\n      setLineNumbers = _useState[1];\n\n  var _useState2 = useState(0),\n      caretPos = _useState2[0],\n      setCaretPos = _useState2[1];\n\n  var codeBlockRef = useRef(null);\n  var textAreaRef = useRef(null);\n  var lineNumbersRef = useRef(null);\n\n  var countLines = function countLines(codeString) {\n    return codeString === null || codeString === void 0 ? void 0 : codeString.split(/\\r*\\n/);\n  };\n\n  var handleScroll = function handleScroll(e) {\n    var eventTarget = e.target;\n\n    if (codeBlockRef.current) {\n      codeBlockRef.current.scroll(eventTarget.scrollLeft, eventTarget.scrollTop);\n\n      if (inlineNumbers && lineNumbersRef.current) {\n        lineNumbersRef.current.scroll(eventTarget.scrollLeft, eventTarget.scrollTop);\n      }\n    }\n  };\n\n  var handleChange = function handleChange(e) {\n    setValue(e.target.value);\n  };\n\n  var setCaretPosition = function setCaretPosition(ctrl, pos) {\n    if (ctrl.setSelectionRange) {\n      ctrl.focus();\n      ctrl.setSelectionRange(pos, pos);\n    } else if (ctrl.createTextRange) {\n      var range = ctrl.createTextRange();\n      range.collapse(true);\n      range.moveEnd('character', pos);\n      range.moveStart('character', pos);\n      range.select();\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(e) {\n    var myField = textAreaRef.current;\n    var myValue = Math.random().toString(32).substring(0, tabSize).replace(/./g, ' ');\n\n    if (e.key === 'Tab') {\n      e.preventDefault();\n\n      if (myField !== null && myField !== void 0 && myField.selectionStart || (myField === null || myField === void 0 ? void 0 : myField.selectionStart) === 0) {\n        var startPos = myField.selectionStart;\n        var endPos = myField.selectionEnd;\n        setCaretPos(startPos + myValue.length);\n        var newValue = myField.value.substring(0, startPos) + myValue + myField.value.substring(endPos, myField.value.length);\n        setValue(newValue);\n      }\n    }\n  };\n\n  useLayoutEffect(function () {\n    if (caretPos !== 0 && textAreaRef.current) {\n      setCaretPosition(textAreaRef.current, caretPos);\n      setCaretPos(0);\n    }\n  }, [caretPos]);\n  useEffect(function () {\n    if (codeBlockRef.current) {\n      highlightBlock(codeBlockRef.current);\n      setLineNumbers(countLines(value));\n    }\n  }, [value]);\n  return React.createElement(\"div\", {\n    className: 'hljs container-code-editor__qxcy',\n    style: {\n      width: width,\n      height: height,\n      padding: padding,\n      borderRadius: borderRadius\n    }\n  }, inlineNumbers && React.createElement(\"div\", {\n    className: 'hljs line-numbers__qxcy',\n    ref: lineNumbersRef\n  }, lineNumbers === null || lineNumbers === void 0 ? void 0 : lineNumbers.map(function (__val, key) {\n    return React.createElement(\"div\", {\n      className: 'line-numbers__number__qxcy',\n      key: key\n    }, key + 1);\n  })), React.createElement(\"pre\", {\n    className: 'code-editor__qxcy'\n  }, React.createElement(\"code\", {\n    ref: codeBlockRef,\n    className: \"code-editor__hlcode__qxcy language-\" + language\n  }, value + \"\\n\\r\"), React.createElement(\"textarea\", {\n    value: value,\n    spellCheck: 'false',\n    ref: textAreaRef,\n    className: 'hljs code-editor__textarea__qxcy',\n    onScroll: handleScroll,\n    onChange: handleChange,\n    maxLength: 3000,\n    onKeyDown: handleKeyDown,\n    style: {\n      msScrollbarBaseColor: 'violet',\n      scrollbarWidth: 'thin',\n      caretColor: caretColor\n    }\n  })));\n};\n\nexport { CodeEditorEditable };","map":{"version":3,"sources":["../src/index.tsx"],"names":["require","CodeEditorEditable","width","height","padding","borderRadius","value","setValue","language","caretColor","tabSize","inlineNumbers","lineNumbers","setLineNumbers","useState","caretPos","setCaretPos","codeBlockRef","useRef","textAreaRef","lineNumbersRef","countLines","codeString","handleScroll","eventTarget","e","handleChange","setCaretPosition","ctrl","range","handleKeyDown","myField","myValue","Math","startPos","endPos","newValue","useLayoutEffect","useEffect","highlightBlock","className","style","ref","key","spellCheck","onScroll","onChange","maxLength","onKeyDown","msScrollbarBaseColor","scrollbarWidth"],"mappings":";;;AASAA,OAAO,CAAPA,aAAO,CAAPA;;IAeaC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,IAAA,EAAA;wBAChCC,K;MAAAA,KAAAA,GAAAA,UAAAA,KAAAA,KAAAA,CAAAA,GAAQ,OAARA,GAAQ,U;yBACRC,M;MAAAA,MAAAA,GAAAA,WAAAA,KAAAA,KAAAA,CAAAA,GAAS,OAATA,GAAS,W;0BACTC,O;MAAAA,OAAAA,GAAAA,YAAAA,KAAAA,KAAAA,CAAAA,GAAU,GAAVA,GAAU,Y;+BACVC,Y;MAAAA,YAAAA,GAAAA,iBAAAA,KAAAA,KAAAA,CAAAA,GAAe,GAAfA,GAAe,iB;MACfC,KAAAA,GAAAA,IAAAA,CAAAA,K;MACAC,QAAAA,GAAAA,IAAAA,CAAAA,Q;MACAC,QAAAA,GAAAA,IAAAA,CAAAA,Q;6BACAC,U;MAAAA,UAAAA,GAAAA,eAAAA,KAAAA,KAAAA,CAAAA,GAAa,KAAbA,GAAa,e;0BACbC,O;MAAAA,OAAAA,GAAAA,YAAAA,KAAAA,KAAAA,CAAAA,GAAU,CAAVA,GAAU,Y;gCACVC,a;MAAAA,aAAAA,GAAAA,kBAAAA,KAAAA,KAAAA,CAAAA,GAAgB,IAAhBA,GAAgB,kB;;kBAEsBG,QAAQ,CAAC,CAAD,EAAC,CAAD,C;MAAvCF,WAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAAaC,cAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;mBACYC,QAAQ,CAAA,CAAA,C;MAAjCC,QAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;MAAUC,WAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;AAEjB,MAAMC,YAAY,GAAGC,MAAM,CAA3B,IAA2B,CAA3B;AACA,MAAMC,WAAW,GAAGD,MAAM,CAA1B,IAA0B,CAA1B;AACA,MAAME,cAAc,GAAGF,MAAM,CAA7B,IAA6B,CAA7B;;AAEA,MAAMG,UAAU,GAAG,SAAbA,UAAa,CAAA,UAAA,EAAA;AACjB,WAAOC,UAAP,KAAA,IAAOA,IAAAA,UAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,UAAU,CAAVA,KAAAA,CAAP,OAAOA,CAAP;AADF,GAAA;;AAIA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,CAAA,EAAA;AACnB,QAAMC,WAAW,GAAGC,CAAC,CAArB,MAAA;;AACA,QAAIR,YAAY,CAAhB,OAAA,EAA0B;AACxBA,MAAAA,YAAY,CAAZA,OAAAA,CAAAA,MAAAA,CACEO,WAAW,CADbP,UAAAA,EAEEO,WAAW,CAFbP,SAAAA;;AAIA,UAAIN,aAAa,IAAIS,cAAc,CAAnC,OAAA,EAA6C;AAC3CA,QAAAA,cAAc,CAAdA,OAAAA,CAAAA,MAAAA,CACEI,WAAW,CADbJ,UAAAA,EAEEI,WAAW,CAFbJ,SAAAA;AAID;AACF;AAbH,GAAA;;AAeA,MAAMM,YAAY,GAAG,SAAfA,YAAe,CAAA,CAAA,EAAA;AACnBnB,IAAAA,QAAQ,CAAEkB,CAAC,CAADA,MAAAA,CAAVlB,KAAQ,CAARA;AADF,GAAA;;AAIA,MAAMoB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAAA,GAAA,EAAA;AACvB,QAAIC,IAAI,CAAR,iBAAA,EAA4B;AAC1BA,MAAAA,IAAI,CAAJA,KAAAA;AACAA,MAAAA,IAAI,CAAJA,iBAAAA,CAAAA,GAAAA,EAAAA,GAAAA;AAFF,KAAA,MAIO,IAAKA,IAAY,CAAjB,eAAA,EAAmC;AAExC,UAAMC,KAAK,GAAID,IAAY,CAA3B,eAAeA,EAAf;AACAC,MAAAA,KAAK,CAALA,QAAAA,CAAAA,IAAAA;AACAA,MAAAA,KAAK,CAALA,OAAAA,CAAAA,WAAAA,EAAAA,GAAAA;AACAA,MAAAA,KAAK,CAALA,SAAAA,CAAAA,WAAAA,EAAAA,GAAAA;AACAA,MAAAA,KAAK,CAALA,MAAAA;AACD;AAZH,GAAA;;AAeA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAA,CAAA,EAAA;AACpB,QAAMC,OAAO,GAAGZ,WAAW,CAA3B,OAAA;AACA,QAAMa,OAAO,GAAGC,IAAI,CAAJA,MAAAA,GAAAA,QAAAA,CAAAA,EAAAA,EAAAA,SAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EAAAA,OAAAA,CAAAA,IAAAA,EAAhB,GAAgBA,CAAhB;;AAKA,QAAIR,CAAC,CAADA,GAAAA,KAAJ,KAAA,EAAqB;AACnBA,MAAAA,CAAC,CAADA,cAAAA;;AACA,UAAIM,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAA,KAAPA,CAAAA,IAAAA,OAAO,CAAPA,cAAAA,IAA2B,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAA,KAAP,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,cAAA,MAA/B,CAAA,EAA8D;AAC5D,YAAMG,QAAQ,GAAGH,OAAO,CAAxB,cAAA;AACA,YAAMI,MAAM,GAAGJ,OAAO,CAAtB,YAAA;AACAf,QAAAA,WAAW,CAACkB,QAAQ,GAAGF,OAAO,CAA9BhB,MAAW,CAAXA;AAEA,YAAMoB,QAAQ,GACZL,OAAO,CAAPA,KAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAAA,QAAAA,IAAAA,OAAAA,GAEAA,OAAO,CAAPA,KAAAA,CAAAA,SAAAA,CAAAA,MAAAA,EAAgCA,OAAO,CAAPA,KAAAA,CAHlC,MAGEA,CAHF;AAKAxB,QAAAA,QAAQ,CAARA,QAAQ,CAARA;AACD;AACF;AArBH,GAAA;;AAwBA8B,EAAAA,eAAe,CAAC,YAAA;AACd,QAAItB,QAAQ,KAARA,CAAAA,IAAkBI,WAAW,CAAjC,OAAA,EAA2C;AACzCQ,MAAAA,gBAAgB,CAACR,WAAW,CAAZ,OAAA,EAAhBQ,QAAgB,CAAhBA;AACAX,MAAAA,WAAW,CAAXA,CAAW,CAAXA;AACD;AAJY,GAAA,EAKZ,CALHqB,QAKG,CALY,CAAfA;AAOAC,EAAAA,SAAS,CAAC,YAAA;AACR,QAAIrB,YAAY,CAAhB,OAAA,EAA0B;AACxBsB,MAAAA,cAAc,CAACtB,YAAY,CAA3BsB,OAAc,CAAdA;AACA1B,MAAAA,cAAc,CAACQ,UAAU,CAAzBR,KAAyB,CAAX,CAAdA;AACD;AAJM,GAAA,EAKN,CALHyB,KAKG,CALM,CAATA;AAOA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEE,IAAAA,SAAS,EAAC,kCADZ;AAEEC,IAAAA,KAAK,EAAE;AAAEvC,MAAAA,KAAK,EAAP,KAAA;AAASC,MAAAA,MAAM,EAAf,MAAA;AAAiBC,MAAAA,OAAO,EAAxB,OAAA;AAA0BC,MAAAA,YAAY,EAAZA;AAA1B;AAFT,GAAA,EAIGM,aAAa,IACZ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK6B,IAAAA,SAAS,EAAC,yBAAf;AAAyCE,IAAAA,GAAG,EAAEtB;AAA9C,GAAA,EACG,WADH,KAAA,IACG,IAAA,WADH,KAAA,KAAA,CACG,GADH,KAAA,CACG,GAAA,WAAW,CAAX,GAAA,CAAiB,UAAA,KAAA,EAAA,GAAA,EAAA;AAAA,WAChB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAKoB,MAAAA,SAAS,EAAC,4BAAf;AAA4CG,MAAAA,GAAG,EAAEA;AAAjD,KAAA,EACGA,GAAG,GAFU,CAChB,CADgB;AANxB,GAMO,CADH,CALJ,EAaE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAKH,IAAAA,SAAS,EAAC;AAAf,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACEE,IAAAA,GAAG,EAAEzB,YADP;AAEEuB,IAAAA,SAAS,EAAA,wCAAwChC;AAFnD,GAAA,EAIMF,KAJN,GADF,MACE,CADF,EAOE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACEA,IAAAA,KAAK,EAAEA,KADT;AAEEsC,IAAAA,UAAU,EAAC,OAFb;AAGEF,IAAAA,GAAG,EAAEvB,WAHP;AAIEqB,IAAAA,SAAS,EAAC,kCAJZ;AAKEK,IAAAA,QAAQ,EAAEtB,YALZ;AAMEuB,IAAAA,QAAQ,EAAEpB,YANZ;AAOEqB,IAAAA,SAAS,EAAE,IAPb;AAQEC,IAAAA,SAAS,EAAElB,aARb;AASEW,IAAAA,KAAK,EAAE;AACLQ,MAAAA,oBAAoB,EADf,QAAA;AAELC,MAAAA,cAAc,EAFT,MAAA;AAGLzC,MAAAA,UAAU,EAAEA;AAHP;AATT,GAAA,CAPF,CAbF,CADF;AAuCD,C","sourcesContent":["import { highlightBlock } from 'highlight.js';\nimport React, {\n  ChangeEvent,\n  ReactElement,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState\n} from 'react';\nrequire('./index.css');\n\ninterface CodeEditorProps {\n  value: string;\n  setValue: any;\n  width?: string;\n  height?: string;\n  padding?: string;\n  borderRadius?: string;\n  language: 'html' | 'js' | 'css' | string;\n  inlineNumbers?: boolean;\n  caretColor?: string;\n  tabSize?: 1 | 2 | 3 | 4 | 5 | 6;\n}\n\nexport const CodeEditorEditable = ({\n  width = '500px',\n  height = '500px',\n  padding = '0',\n  borderRadius = '0',\n  value,\n  setValue,\n  language,\n  caretColor = 'red',\n  tabSize = 2,\n  inlineNumbers = true\n}: CodeEditorProps): ReactElement => {\n  const [lineNumbers, setLineNumbers] = useState(['']);\n  const [caretPos, setCaretPos] = useState(0);\n\n  const codeBlockRef = useRef<HTMLDivElement>(null);\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const lineNumbersRef = useRef<HTMLDivElement>(null);\n\n  const countLines = (codeString: string): string[] => {\n    return codeString?.split(/\\r*\\n/);\n  };\n\n  const handleScroll = (e: React.UIEvent<HTMLElement>): void => {\n    const eventTarget = e.target as Element;\n    if (codeBlockRef.current) {\n      codeBlockRef.current.scroll(\n        eventTarget.scrollLeft,\n        eventTarget.scrollTop\n      );\n      if (inlineNumbers && lineNumbersRef.current) {\n        lineNumbersRef.current.scroll(\n          eventTarget.scrollLeft,\n          eventTarget.scrollTop\n        );\n      }\n    }\n  };\n  const handleChange = (e: ChangeEvent): void => {\n    setValue((e.target as HTMLInputElement).value);\n  };\n\n  const setCaretPosition = (ctrl: HTMLTextAreaElement, pos: number): void => {\n    if (ctrl.setSelectionRange) {\n      ctrl.focus();\n      ctrl.setSelectionRange(pos, pos);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((ctrl as any).createTextRange) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const range = (ctrl as any).createTextRange();\n      range.collapse(true);\n      range.moveEnd('character', pos);\n      range.moveStart('character', pos);\n      range.select();\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>): void => {\n    const myField = textAreaRef.current;\n    const myValue = Math.random()\n      .toString(32)\n      .substring(0, tabSize)\n      .replace(/./g, ' ');\n\n    if (e.key === 'Tab') {\n      e.preventDefault();\n      if (myField?.selectionStart || myField?.selectionStart === 0) {\n        const startPos = myField.selectionStart;\n        const endPos = myField.selectionEnd;\n        setCaretPos(startPos + myValue.length);\n\n        const newValue =\n          myField.value.substring(0, startPos) +\n          myValue +\n          myField.value.substring(endPos, myField.value.length);\n\n        setValue(newValue);\n      }\n    }\n  };\n\n  useLayoutEffect(() => {\n    if (caretPos !== 0 && textAreaRef.current) {\n      setCaretPosition(textAreaRef.current, caretPos);\n      setCaretPos(0);\n    }\n  }, [caretPos]);\n\n  useEffect(() => {\n    if (codeBlockRef.current) {\n      highlightBlock(codeBlockRef.current);\n      setLineNumbers(countLines(value));\n    }\n  }, [value]);\n\n  return (\n    <div\n      className='hljs container-code-editor__qxcy'\n      style={{ width, height, padding, borderRadius }}\n    >\n      {inlineNumbers && (\n        <div className='hljs line-numbers__qxcy' ref={lineNumbersRef}>\n          {lineNumbers?.map((__val, key) => (\n            <div className='line-numbers__number__qxcy' key={key}>\n              {key + 1}\n            </div>\n          ))}\n        </div>\n      )}\n      <pre className='code-editor__qxcy'>\n        <code\n          ref={codeBlockRef}\n          className={`code-editor__hlcode__qxcy language-${language}`}\n        >\n          {`${value}\\n\\r`}\n        </code>\n        <textarea\n          value={value}\n          spellCheck='false'\n          ref={textAreaRef}\n          className='hljs code-editor__textarea__qxcy'\n          onScroll={handleScroll}\n          onChange={handleChange}\n          maxLength={3000}\n          onKeyDown={handleKeyDown}\n          style={{\n            msScrollbarBaseColor: 'violet',\n            scrollbarWidth: 'thin',\n            caretColor: caretColor\n          }}\n        />\n      </pre>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}