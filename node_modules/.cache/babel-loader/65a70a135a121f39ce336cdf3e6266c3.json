{"ast":null,"code":"function curry(fn) {\n  return function curried() {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return args.length >= fn.length ? fn.apply(this, args) : function () {\n      for (var _len2 = arguments.length, nextArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        nextArgs[_key2] = arguments[_key2];\n      }\n\n      return curried.apply(_this, [].concat(args, nextArgs));\n    };\n  };\n}\n\nexport default curry;","map":{"version":3,"sources":["C:/Users/Dhruv/Downloads/projects OP/CodePlay/node_modules/@monaco-editor/loader/lib/es/utils/curry.js"],"names":["curry","fn","curried","_this","_len","arguments","length","args","Array","_key","apply","_len2","nextArgs","_key2","concat"],"mappings":"AAAA,SAASA,KAAT,CAAeC,EAAf,EAAmB;AACjB,SAAO,SAASC,OAAT,GAAmB;AACxB,QAAIC,KAAK,GAAG,IAAZ;;AAEA,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,WAAOF,IAAI,CAACD,MAAL,IAAeL,EAAE,CAACK,MAAlB,GAA2BL,EAAE,CAACS,KAAH,CAAS,IAAT,EAAeH,IAAf,CAA3B,GAAkD,YAAY;AACnE,WAAK,IAAII,KAAK,GAAGN,SAAS,CAACC,MAAtB,EAA8BM,QAAQ,GAAG,IAAIJ,KAAJ,CAAUG,KAAV,CAAzC,EAA2DE,KAAK,GAAG,CAAxE,EAA2EA,KAAK,GAAGF,KAAnF,EAA0FE,KAAK,EAA/F,EAAmG;AACjGD,QAAAA,QAAQ,CAACC,KAAD,CAAR,GAAkBR,SAAS,CAACQ,KAAD,CAA3B;AACD;;AAED,aAAOX,OAAO,CAACQ,KAAR,CAAcP,KAAd,EAAqB,GAAGW,MAAH,CAAUP,IAAV,EAAgBK,QAAhB,CAArB,CAAP;AACD,KAND;AAOD,GAdD;AAeD;;AAED,eAAeZ,KAAf","sourcesContent":["function curry(fn) {\n  return function curried() {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return args.length >= fn.length ? fn.apply(this, args) : function () {\n      for (var _len2 = arguments.length, nextArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        nextArgs[_key2] = arguments[_key2];\n      }\n\n      return curried.apply(_this, [].concat(args, nextArgs));\n    };\n  };\n}\n\nexport default curry;\n"]},"metadata":{},"sourceType":"module"}