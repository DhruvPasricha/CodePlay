{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBoundPosition = getBoundPosition;\nexports.snapToGrid = snapToGrid;\nexports.canDragX = canDragX;\nexports.canDragY = canDragY;\nexports.getControlPosition = getControlPosition;\nexports.createCoreData = createCoreData;\nexports.createDraggableData = createDraggableData;\n\nvar _shims = require(\"./shims\");\n\nvar _domFns = require(\"./domFns\");\n\nfunction getBoundPosition(draggable\n/*: Draggable*/\n, x\n/*: number*/\n, y\n/*: number*/\n)\n/*: [number, number]*/\n{\n  // If no bounds, short-circuit and move on\n  if (!draggable.props.bounds) return [x, y]; // Clone new bounds\n\n  var bounds = draggable.props.bounds;\n  bounds = typeof bounds === 'string' ? bounds : cloneBounds(bounds);\n  var node = findDOMNode(draggable);\n\n  if (typeof bounds === 'string') {\n    var ownerDocument = node.ownerDocument;\n    var ownerWindow = ownerDocument.defaultView;\n    var boundNode;\n\n    if (bounds === 'parent') {\n      boundNode = node.parentNode;\n    } else {\n      boundNode = ownerDocument.querySelector(bounds);\n    }\n\n    if (!(boundNode instanceof ownerWindow.HTMLElement)) {\n      throw new Error('Bounds selector \"' + bounds + '\" could not find an element.');\n    }\n\n    var boundNodeEl\n    /*: HTMLElement*/\n    = boundNode; // for Flow, can't seem to refine correctly\n\n    var nodeStyle = ownerWindow.getComputedStyle(node);\n    var boundNodeStyle = ownerWindow.getComputedStyle(boundNodeEl); // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\n\n    bounds = {\n      left: -node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingLeft) + (0, _shims.int)(nodeStyle.marginLeft),\n      top: -node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingTop) + (0, _shims.int)(nodeStyle.marginTop),\n      right: (0, _domFns.innerWidth)(boundNodeEl) - (0, _domFns.outerWidth)(node) - node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingRight) - (0, _shims.int)(nodeStyle.marginRight),\n      bottom: (0, _domFns.innerHeight)(boundNodeEl) - (0, _domFns.outerHeight)(node) - node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingBottom) - (0, _shims.int)(nodeStyle.marginBottom)\n    };\n  } // Keep x and y below right and bottom limits...\n\n\n  if ((0, _shims.isNum)(bounds.right)) x = Math.min(x, bounds.right);\n  if ((0, _shims.isNum)(bounds.bottom)) y = Math.min(y, bounds.bottom); // But above left and top limits.\n\n  if ((0, _shims.isNum)(bounds.left)) x = Math.max(x, bounds.left);\n  if ((0, _shims.isNum)(bounds.top)) y = Math.max(y, bounds.top);\n  return [x, y];\n}\n\nfunction snapToGrid(grid\n/*: [number, number]*/\n, pendingX\n/*: number*/\n, pendingY\n/*: number*/\n)\n/*: [number, number]*/\n{\n  var x = Math.round(pendingX / grid[0]) * grid[0];\n  var y = Math.round(pendingY / grid[1]) * grid[1];\n  return [x, y];\n}\n\nfunction canDragX(draggable\n/*: Draggable*/\n)\n/*: boolean*/\n{\n  return draggable.props.axis === 'both' || draggable.props.axis === 'x';\n}\n\nfunction canDragY(draggable\n/*: Draggable*/\n)\n/*: boolean*/\n{\n  return draggable.props.axis === 'both' || draggable.props.axis === 'y';\n} // Get {x, y} positions from event.\n\n\nfunction getControlPosition(e\n/*: MouseTouchEvent*/\n, touchIdentifier\n/*: ?number*/\n, draggableCore\n/*: DraggableCore*/\n)\n/*: ?ControlPosition*/\n{\n  var touchObj = typeof touchIdentifier === 'number' ? (0, _domFns.getTouch)(e, touchIdentifier) : null;\n  if (typeof touchIdentifier === 'number' && !touchObj) return null; // not the right touch\n\n  var node = findDOMNode(draggableCore); // User can provide an offsetParent if desired.\n\n  var offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;\n  return (0, _domFns.offsetXYFromParent)(touchObj || e, offsetParent, draggableCore.props.scale);\n} // Create an data object exposed by <DraggableCore>'s events\n\n\nfunction createCoreData(draggable\n/*: DraggableCore*/\n, x\n/*: number*/\n, y\n/*: number*/\n)\n/*: DraggableData*/\n{\n  var state = draggable.state;\n  var isStart = !(0, _shims.isNum)(state.lastX);\n  var node = findDOMNode(draggable);\n\n  if (isStart) {\n    // If this is our first move, use the x and y as last coords.\n    return {\n      node: node,\n      deltaX: 0,\n      deltaY: 0,\n      lastX: x,\n      lastY: y,\n      x: x,\n      y: y\n    };\n  } else {\n    // Otherwise calculate proper values.\n    return {\n      node: node,\n      deltaX: x - state.lastX,\n      deltaY: y - state.lastY,\n      lastX: state.lastX,\n      lastY: state.lastY,\n      x: x,\n      y: y\n    };\n  }\n} // Create an data exposed by <Draggable>'s events\n\n\nfunction createDraggableData(draggable\n/*: Draggable*/\n, coreData\n/*: DraggableData*/\n)\n/*: DraggableData*/\n{\n  var scale = draggable.props.scale;\n  return {\n    node: coreData.node,\n    x: draggable.state.x + coreData.deltaX / scale,\n    y: draggable.state.y + coreData.deltaY / scale,\n    deltaX: coreData.deltaX / scale,\n    deltaY: coreData.deltaY / scale,\n    lastX: draggable.state.x,\n    lastY: draggable.state.y\n  };\n} // A lot faster than stringify/parse\n\n\nfunction cloneBounds(bounds\n/*: Bounds*/\n)\n/*: Bounds*/\n{\n  return {\n    left: bounds.left,\n    top: bounds.top,\n    right: bounds.right,\n    bottom: bounds.bottom\n  };\n}\n\nfunction findDOMNode(draggable\n/*: Draggable | DraggableCore*/\n)\n/*: HTMLElement*/\n{\n  var node = draggable.findDOMNode();\n\n  if (!node) {\n    throw new Error('<DraggableCore>: Unmounted during event!');\n  } // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME\n\n\n  return node;\n}","map":{"version":3,"sources":["C:/Users/Dhruv/Downloads/projects OP/codepen-clone/node_modules/react-draggable/build/cjs/utils/positionFns.js"],"names":["Object","defineProperty","exports","value","getBoundPosition","snapToGrid","canDragX","canDragY","getControlPosition","createCoreData","createDraggableData","_shims","require","_domFns","draggable","x","y","props","bounds","cloneBounds","node","findDOMNode","ownerDocument","ownerWindow","defaultView","boundNode","parentNode","querySelector","HTMLElement","Error","boundNodeEl","nodeStyle","getComputedStyle","boundNodeStyle","left","offsetLeft","int","paddingLeft","marginLeft","top","offsetTop","paddingTop","marginTop","right","innerWidth","outerWidth","paddingRight","marginRight","bottom","innerHeight","outerHeight","paddingBottom","marginBottom","isNum","Math","min","max","grid","pendingX","pendingY","round","axis","e","touchIdentifier","draggableCore","touchObj","getTouch","offsetParent","body","offsetXYFromParent","scale","state","isStart","lastX","deltaX","deltaY","lastY","coreData"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBoundPosition = getBoundPosition;\nexports.snapToGrid = snapToGrid;\nexports.canDragX = canDragX;\nexports.canDragY = canDragY;\nexports.getControlPosition = getControlPosition;\nexports.createCoreData = createCoreData;\nexports.createDraggableData = createDraggableData;\n\nvar _shims = require(\"./shims\");\n\nvar _domFns = require(\"./domFns\");\n\nfunction getBoundPosition(draggable\n/*: Draggable*/\n, x\n/*: number*/\n, y\n/*: number*/\n)\n/*: [number, number]*/\n{\n  // If no bounds, short-circuit and move on\n  if (!draggable.props.bounds) return [x, y]; // Clone new bounds\n\n  var bounds = draggable.props.bounds;\n  bounds = typeof bounds === 'string' ? bounds : cloneBounds(bounds);\n  var node = findDOMNode(draggable);\n\n  if (typeof bounds === 'string') {\n    var ownerDocument = node.ownerDocument;\n    var ownerWindow = ownerDocument.defaultView;\n    var boundNode;\n\n    if (bounds === 'parent') {\n      boundNode = node.parentNode;\n    } else {\n      boundNode = ownerDocument.querySelector(bounds);\n    }\n\n    if (!(boundNode instanceof ownerWindow.HTMLElement)) {\n      throw new Error('Bounds selector \"' + bounds + '\" could not find an element.');\n    }\n\n    var boundNodeEl\n    /*: HTMLElement*/\n    = boundNode; // for Flow, can't seem to refine correctly\n\n    var nodeStyle = ownerWindow.getComputedStyle(node);\n    var boundNodeStyle = ownerWindow.getComputedStyle(boundNodeEl); // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\n\n    bounds = {\n      left: -node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingLeft) + (0, _shims.int)(nodeStyle.marginLeft),\n      top: -node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingTop) + (0, _shims.int)(nodeStyle.marginTop),\n      right: (0, _domFns.innerWidth)(boundNodeEl) - (0, _domFns.outerWidth)(node) - node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingRight) - (0, _shims.int)(nodeStyle.marginRight),\n      bottom: (0, _domFns.innerHeight)(boundNodeEl) - (0, _domFns.outerHeight)(node) - node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingBottom) - (0, _shims.int)(nodeStyle.marginBottom)\n    };\n  } // Keep x and y below right and bottom limits...\n\n\n  if ((0, _shims.isNum)(bounds.right)) x = Math.min(x, bounds.right);\n  if ((0, _shims.isNum)(bounds.bottom)) y = Math.min(y, bounds.bottom); // But above left and top limits.\n\n  if ((0, _shims.isNum)(bounds.left)) x = Math.max(x, bounds.left);\n  if ((0, _shims.isNum)(bounds.top)) y = Math.max(y, bounds.top);\n  return [x, y];\n}\n\nfunction snapToGrid(grid\n/*: [number, number]*/\n, pendingX\n/*: number*/\n, pendingY\n/*: number*/\n)\n/*: [number, number]*/\n{\n  var x = Math.round(pendingX / grid[0]) * grid[0];\n  var y = Math.round(pendingY / grid[1]) * grid[1];\n  return [x, y];\n}\n\nfunction canDragX(draggable\n/*: Draggable*/\n)\n/*: boolean*/\n{\n  return draggable.props.axis === 'both' || draggable.props.axis === 'x';\n}\n\nfunction canDragY(draggable\n/*: Draggable*/\n)\n/*: boolean*/\n{\n  return draggable.props.axis === 'both' || draggable.props.axis === 'y';\n} // Get {x, y} positions from event.\n\n\nfunction getControlPosition(e\n/*: MouseTouchEvent*/\n, touchIdentifier\n/*: ?number*/\n, draggableCore\n/*: DraggableCore*/\n)\n/*: ?ControlPosition*/\n{\n  var touchObj = typeof touchIdentifier === 'number' ? (0, _domFns.getTouch)(e, touchIdentifier) : null;\n  if (typeof touchIdentifier === 'number' && !touchObj) return null; // not the right touch\n\n  var node = findDOMNode(draggableCore); // User can provide an offsetParent if desired.\n\n  var offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;\n  return (0, _domFns.offsetXYFromParent)(touchObj || e, offsetParent, draggableCore.props.scale);\n} // Create an data object exposed by <DraggableCore>'s events\n\n\nfunction createCoreData(draggable\n/*: DraggableCore*/\n, x\n/*: number*/\n, y\n/*: number*/\n)\n/*: DraggableData*/\n{\n  var state = draggable.state;\n  var isStart = !(0, _shims.isNum)(state.lastX);\n  var node = findDOMNode(draggable);\n\n  if (isStart) {\n    // If this is our first move, use the x and y as last coords.\n    return {\n      node: node,\n      deltaX: 0,\n      deltaY: 0,\n      lastX: x,\n      lastY: y,\n      x: x,\n      y: y\n    };\n  } else {\n    // Otherwise calculate proper values.\n    return {\n      node: node,\n      deltaX: x - state.lastX,\n      deltaY: y - state.lastY,\n      lastX: state.lastX,\n      lastY: state.lastY,\n      x: x,\n      y: y\n    };\n  }\n} // Create an data exposed by <Draggable>'s events\n\n\nfunction createDraggableData(draggable\n/*: Draggable*/\n, coreData\n/*: DraggableData*/\n)\n/*: DraggableData*/\n{\n  var scale = draggable.props.scale;\n  return {\n    node: coreData.node,\n    x: draggable.state.x + coreData.deltaX / scale,\n    y: draggable.state.y + coreData.deltaY / scale,\n    deltaX: coreData.deltaX / scale,\n    deltaY: coreData.deltaY / scale,\n    lastX: draggable.state.x,\n    lastY: draggable.state.y\n  };\n} // A lot faster than stringify/parse\n\n\nfunction cloneBounds(bounds\n/*: Bounds*/\n)\n/*: Bounds*/\n{\n  return {\n    left: bounds.left,\n    top: bounds.top,\n    right: bounds.right,\n    bottom: bounds.bottom\n  };\n}\n\nfunction findDOMNode(draggable\n/*: Draggable | DraggableCore*/\n)\n/*: HTMLElement*/\n{\n  var node = draggable.findDOMNode();\n\n  if (!node) {\n    throw new Error('<DraggableCore>: Unmounted during event!');\n  } // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME\n\n\n  return node;\n}"]},"metadata":{},"sourceType":"script"}